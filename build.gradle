apply plugin: 'com.github.ben-manes.versions'

buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")

        // "Gradle Versions Plugin" to check for new versions of dependencies
        // https://github.com/ben-manes/gradle-versions-plugin
        // ./gradlew dependencyUpdates -Drevision=release
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    }
    repositories {
        mavenLocal()
        jcenter()
    }
}
apply from: file("versions.gradle")

// tell spring boot to use 5.1.0 as hibernate version (default is 4.3)
ext['hibernate.version'] = versions.hibernate

description = 'Cross platform utility for making REST calls'

allprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    version = versions.restutil
    group = 'com.rockstar.restutil'

    publishing {
        repositories {
            maven {
                credentials(AwsCredentials) {
                    accessKey AWS_ACCESS_KEY
                    secretKey AWS_SECRET_KEY
                }
                url "s3://repo.rockstar-solutions.com.s3-ap-southeast-1.amazonaws.com"
            }
        }
    }
}

subprojects {
    // aspectjVersion property is required by aspectj plugin
    project.ext {
        aspectjVersion = versions.aspectj
    }

    repositories {
        mavenLocal()
        jcenter()
    }

    apply plugin: 'java'
    apply plugin: 'spring-boot'

    bootRepackage {
        enabled = false
    }

    if (System.getProperty('testing', 'false') == 'false') {
        // disables automatic testing
        check.dependsOn.remove(test)
    }

    sourceCompatibility = versions.java
    targetCompatibility = versions.java

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    configurations {
        provided
        compile.extendsFrom provided
        // don't use the standard logging from spring-boot (we want log4j2)
        compile.exclude module: 'spring-boot-starter-logging'
        compile.exclude module: "spring-boot-starter-tomcat"

        testCompile.exclude module: 'spring-boot-starter-logging'
    }

    dependencies {
        provided "org.projectlombok:lombok:" + versions.lombok

//  not working with intellij idea 2016.1
//        jpametamodel("org.hibernate:hibernate-jpamodelgen:" + versions.hibernate)

//        testCompile('org.springframework.boot:spring-boot-starter-test:' + versions.springBoot) {
//            exclude(module: 'spring-boot-starter-logging')
//        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    configurations {
        tests
    }

    // build the archiveBaseName (for the jar) using 3 levels. TODO: find a way to support n levels
    archivesBaseName = "${project.parent.name}-${project.name}"
    archivesBaseName = "${archivesBaseName.startsWith(rootProject.name) ? archivesBaseName : rootProject.name + '-' + archivesBaseName}"

    def srcJava = 'src/main/java'
    def srcDelomboked = 'build/src-delomboked'

    task delombok() {
        description 'Delomboks the source code'
        doLast {
            ant.taskdef(classname: 'lombok.delombok.ant.Tasks$Delombok', classpath: configurations.compile.asPath, name: 'delombok')
            ant.mkdir(dir: srcDelomboked)
            ant.delombok(verbose: 'false', encoding: 'UTF-8', to: srcDelomboked, from: srcJava, classpath: configurations.compile.asPath)
        }
    }

    task sourcesJar(type: Jar, dependsOn: delombok) {
        classifier = 'sources'
        // store delomboked sources in the sources.jar so that they can be used without lombok
        // (important for gwt and j2objc)
        from file(srcDelomboked)
    }

    /**
     packages the tests of the current module so that they can be referenced by other modules of the project
     reference the test-jar like this:
     testCompile project(path: ':common:context', configuration: 'tests')
     or:
     testCompile group: 'com.kickstarter.shared', name: 'sample-shared', version: version, classifier: 'tests'
     */
    task packageTests(type: Jar) {
        classifier = 'tests'
        baseName = "${project.archivesBaseName}"
        from sourceSets.test.output
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
        archives packageTests
        tests packageTests
    }

    sourceSets {

        generated {
            java { srcDirs = ['build/generated'] }
        }

        main {
            java { srcDir 'src/main/java' }
            resources { srcDir 'src/main/resources' }
        }

        test {
            java { srcDir 'src/test/java' }
            resources { srcDir 'src/test/resources' }
        }
    }

    idea {
        module {
            name = archivesBaseName

            //if you need to put 'provided' dependencies on the classpath
//            scopes.PROVIDED.plus += [configurations.provided]

            downloadJavadoc = false
            downloadSources = false
        }
    }


    task wrapper(type: Wrapper) {
        distributionUrl = 'https://services.gradle.org/distributions/gradle-2.11-bin.zip'
    }
}

// extra configuration for "Gradle Versions Plugin": filter out release candidates etc.
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
